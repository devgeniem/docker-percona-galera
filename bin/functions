#!/bin/bash
function cluster_members() {
  CLUSTER_MEMBERS=
  LIST=
  for server in $(cat /app/cluster_members.txt); do
    echo -n "-----> Testing potential db host $server..."
    if echo "" | nc $server 3306 | grep mysql_native_password > /dev/null; then
      echo "OK"
      LIST+="$server,"
    else
      echo "NOPE"
    fi
  done
  export CLUSTER_MEMBERS=$(echo $LIST | sed 's/,$//')
}

function init_database() {
  chown -R mysql:mysql /var/lib/mysql
  if [[ ! -d /var/lib/mysql/mysql ]]; then
    echo "==> An empty or uninitialized database is detected in /var/lib/mysql"
    echo "-----> Creating database..."
    mysql_install_db > /dev/null 2>&1
    echo "-----> Done!"
  else
    echo "-----> Using an existing database"
  fi
  echo "==> starting mysql in order to set up passwords"
  mysqld_safe --skip-syslog --skip-networking > /dev/null &
  echo "-----> testing if DB is up"
  while [[ ! -e /var/run/mysqld/mysqld.sock ]] ; do sleep 1; done
  while ! mysql -e 'select now()'; do sleep 1; done
  mysql_creds

  if [[ -n ${MYSQL_DATABASE} ]]; then
    echo "-----> creating database: ${MYSQL_DATABASE}"
    mysqladmin create ${MYSQL_DATABASE} || echo ${MYSQL_DATABASE} may already exist.
  fi

  echo "==> stopping mysql after setting up passwords"
  mysqladmin shutdown
}

function mysql_creds() {
  mysql -e "SET wsrep_on=OFF; GRANT ALL ON *.* TO '$REP_USER'@'%' IDENTIFIED BY '$REP_PASS';"
  mysql -e "SET wsrep_on=OFF; GRANT ALL ON *.* TO '$REP_USER'@'localhost' IDENTIFIED BY '$REP_PASS';"
  mysql -e "SET wsrep_on=OFF; GRANT ALL PRIVILEGES ON *.* TO '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASS';"
  mysql -e "SET wsrep_on=OFF; GRANT SUPER ON *.* TO '$MYSQL_USER'@'%' WITH GRANT OPTION;"
  mysql -e 'FLUSH PRIVILEGES;'
}

function configure_registrator() {
  export ETCD_PORT=${ETCD_PORT:-4001}
  export ETCD="$ETCD_HOST:$ETCD_PORT"
  export CONFD_OPTIONS="-node $ETCD -config-file /app/confd.toml -backend etcd"
  echo "==> Sleep $(($TTL+1)) seconds to let old registrator services expire"
  sleep $(($TTL+1))
}

function configure_env() {
  export CONFD_OPTIONS="-config-file /app/confd.toml -backend env"
}
